(() => {
  // javascript/utils/get-focusable-elements.js
  var get_focusable_elements_default = (parent) => {
    if (!parent) {
      console.warn("You need to pass a parent HTMLElement");
      return [];
    }
    return parent.querySelectorAll(
      'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"]):not([disabled]), details:not([disabled]), summary:not(:disabled)'
    );
  };

  // javascript/components/nav.js
  var BurgerMenu = class extends HTMLElement {
    constructor() {
      super();
      const self = this;
      this.state = new Proxy(
        {
          status: "open",
          enabled: false
        },
        {
          set(state, key, value) {
            const oldValue = state[key];
            state[key] = value;
            if (oldValue !== value) {
              self.processStateChange();
            }
            return state;
          }
        }
      );
    }
    get maxWidth() {
      return parseInt(this.getAttribute("max-width") || 9999, 10);
    }
    connectedCallback() {
      this.initialMarkup = this.innerHTML;
      this.render();
      const observer = new ResizeObserver((observedItems) => {
        const { contentRect } = observedItems[0];
        this.state.enabled = contentRect.width <= this.maxWidth;
      });
      observer.observe(this.parentNode);
    }
    render() {
      this.innerHTML = `
      <div class="burger-menu" data-element="burger-root">
        <button class="burger-menu__trigger" data-element="burger-menu-trigger" type="button" aria-label="Open menu">
          <span class="burger-menu__bar" aria-hidden="true"></span>
        </button>
        <div class="burger-menu__panel" data-element="burger-menu-panel">
          ${this.initialMarkup} 
        </div>
      </div>
    `;
      this.postRender();
    }
    postRender() {
      this.trigger = this.querySelector(
        '[data-element="burger-menu-trigger"]'
      );
      this.panel = this.querySelector('[data-element="burger-menu-panel"]');
      this.root = this.querySelector('[data-element="burger-root"]');
      this.focusableElements = get_focusable_elements_default(this);
      if (this.trigger && this.panel) {
        this.toggle();
        this.trigger.addEventListener("click", (evt) => {
          evt.preventDefault();
          this.toggle();
        });
        document.addEventListener("focusin", () => {
          if (!this.contains(document.activeElement)) {
            this.toggle("closed");
          }
        });
        return;
      }
      this.innerHTML = this.initialMarkup;
    }
    toggle(forcedStatus) {
      if (forcedStatus) {
        if (this.state.status === forcedStatus) {
          return;
        }
        this.state.status = forcedStatus;
      } else {
        this.state.status = this.state.status === "closed" ? "open" : "closed";
      }
    }
    processStateChange() {
      this.root.setAttribute("status", this.state.status);
      this.root.setAttribute(
        "enabled",
        this.state.enabled ? "true" : "false"
      );
      this.manageFocus();
      switch (this.state.status) {
        case "closed":
          this.trigger.setAttribute("aria-expanded", "false");
          this.trigger.setAttribute("aria-label", "Open menu");
          break;
        case "open":
        case "initial":
          this.trigger.setAttribute("aria-expanded", "true");
          this.trigger.setAttribute("aria-label", "Close menu");
          break;
      }
    }
    manageFocus() {
      if (!this.state.enabled) {
        this.focusableElements.forEach(
          (element) => element.removeAttribute("tabindex")
        );
        return;
      }
      switch (this.state.status) {
        case "open":
          this.focusableElements.forEach(
            (element) => element.removeAttribute("tabindex")
          );
          break;
        case "closed":
          [...this.focusableElements].filter(
            (element) => element.getAttribute("data-element") !== "burger-menu-trigger"
          ).forEach(
            (element) => element.setAttribute("tabindex", "-1")
          );
          break;
      }
    }
  };
  var nav_default = BurgerMenu;

  // javascript/components/carousel.js
  var CarouselComponent = class extends HTMLElement {
    constructor() {
      super();
    }
    connectedCallback() {
      this.initCarousel();
    }
    initCarousel() {
      const items = this.querySelectorAll(".carousel-item");
      const nextButton = this.querySelector(".carousel-next");
      const prevButton = this.querySelector(".carousel-prev");
      let currentIndex = 0;
      let autoplay = true;
      const updateVisibility = () => {
        items.forEach((item, i) => {
          item.setAttribute("aria-hidden", i !== currentIndex);
          item.classList.toggle("active", i === currentIndex);
        });
      };
      const showNext = () => {
        currentIndex = (currentIndex + 1) % items.length;
        updateVisibility();
      };
      const showPrev = () => {
        currentIndex = (currentIndex - 1 + items.length) % items.length;
        updateVisibility();
      };
      const startAutoplay = () => {
        return setInterval(() => {
          if (autoplay) showNext();
        }, 4e3);
      };
      let interval = startAutoplay();
      this.addEventListener("mouseenter", () => {
        autoplay = false;
        clearInterval(interval);
      });
      const handleKeydown = (e) => {
        if (e.key === "ArrowRight") {
          showNext();
          autoplay = false;
          clearInterval(interval);
        }
        if (e.key === "ArrowLeft") {
          showPrev();
          autoplay = false;
          clearInterval(interval);
        }
      };
      this.addEventListener("focus", () => {
        this.addEventListener("keydown", handleKeydown);
      });
      this.addEventListener("blur", () => {
        this.removeEventListener("keydown", handleKeydown);
      });
      nextButton?.addEventListener("click", () => {
        showNext();
        autoplay = false;
        clearInterval(interval);
      });
      prevButton?.addEventListener("click", () => {
        showPrev();
        autoplay = false;
        clearInterval(interval);
      });
      updateVisibility();
    }
  };

  // javascript/components/gallery.js
  function createDialogs(selector) {
    if (!document.querySelector(selector)) {
      return;
    }
    const gallery = document.querySelector(".gallery");
    const galleryItems = Array.from(document.querySelectorAll(selector));
    const dialog = document.querySelector(".lightbox");
    const dialogInterior = dialog.querySelector(".lightbox-controls");
    const controls = dialog.querySelectorAll(".lightbox-controls__interior > *");
    const title = dialog.querySelector(
      "form .lightbox-controls > .lightbox-alt"
    );
    const [exitBtn, fullScreenBtn, forwardBtn, backwardsBtn] = controls;
    let startingIndex = 0;
    function updateDialog(index) {
      title.textContent = galleryItems[index].querySelector(
        ".gallery-item-title"
      ).textContent;
      const previousPreview = dialog.querySelector("[data-lightbox-preview]");
      if (previousPreview) previousPreview.remove();
      let image = galleryItems[index].querySelector("img");
      if (!image)
        return console.warn("No image found for gallery item", index);
      const clone = image.cloneNode(true);
      clone.removeAttribute("id");
      clone.setAttribute("data-lightbox-preview", String(index));
      dialogInterior.before(clone);
    }
    function nextImage() {
      const nextIndex = startingIndex + 1;
      const nextItem = nextIndex >= galleryItems.length ? 0 : nextIndex;
      startingIndex = nextItem;
      updateDialog(nextItem);
    }
    function previousImage() {
      const prevIndex = startingIndex - 1;
      const prevItem = prevIndex < 0 ? galleryItems.length - 1 : prevIndex;
      startingIndex = prevItem;
      updateDialog(prevItem);
    }
    function fullScreenImage() {
      let image = galleryItems[startingIndex].querySelector("img");
      if (!document.fullscreenElement) {
        image.requestFullscreen();
      } else {
        image.exitFullscreen?.();
      }
    }
    forwardBtn.addEventListener("click", nextImage);
    backwardsBtn.addEventListener("click", previousImage);
    fullScreenBtn.addEventListener("click", fullScreenImage);
    function createDialog(img, index) {
      const button = img.querySelector(".lightbox-button");
      button.addEventListener("click", () => {
        startingIndex = index;
        updateDialog(index);
        dialog.showModal();
        dialog.focus();
      });
      dialog.addEventListener("click", (event) => {
        if (event.target === dialog) return dialog.close();
      });
      dialog.addEventListener("keydown", (e) => {
        switch (e.key) {
          case "ArrowRight":
            e.preventDefault();
            nextImage();
            break;
          case "ArrowLeft":
            e.preventDefault();
            previousImage();
            break;
          case "Escape":
            dialog.close();
            break;
        }
      });
      dialog.addEventListener("close", () => {
        const previousPreview = dialog.querySelector(
          "[data-lightbox-preview]"
        );
        if (previousPreview) previousPreview.remove();
      });
    }
    galleryItems.forEach((img, index) => createDialog(img, index));
  }

  // javascript/components/share.js
  async function shareBtn(btn) {
    if (!btn) {
      return;
    }
    const url = btn.getAttribute("data-link");
    const title = "Check out Alba Pro Services for your exterior cleaning needs!";
    if (navigator.share) {
      navigator.share({ title, url }).then(() => console.log("Content shared successfully!")).catch((error) => console.error("Error sharing:", error));
    } else {
      try {
        await navigator.clipboard.writeText(url);
        btn.textContent = "Link Copied!";
      } catch (error) {
        console.error(error.message);
      }
    }
  }

  // javascript/script.js
  document.querySelectorAll(".btn-share").forEach(
    (item) => item.addEventListener("click", () => shareBtn(item))
  );
  if ("customElements" in window) {
    customElements.define("burger-menu", nav_default);
    customElements.define("carousel-component", CarouselComponent);
  }
  createDialogs(".gallery-item");
  (function() {
    const className = "reel";
    const reels = Array.from(document.querySelectorAll(`.${className}`));
    const toggleOverflowClass = (elem) => {
      elem.classList.toggle(
        "overflowing",
        elem.scrollWidth > elem.clientWidth
      );
    };
    for (let reel of reels) {
      if ("ResizeObserver" in window) {
        new ResizeObserver((entries) => {
          toggleOverflowClass(entries[0].target);
        }).observe(reel);
      }
      if ("MutationObserver" in window) {
        new MutationObserver((entries) => {
          toggleOverflowClass(entries[0].target);
        }).observe(reel, { childList: true });
      }
    }
  })();
})();
